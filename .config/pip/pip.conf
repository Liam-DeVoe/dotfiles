[global]
# ok look. I don't fully understand why either, but pylance can't find packages which
# use pyproject.toml (instead of setup.py) and
# are installed with `pip install -e .`, at least with the [default build backend]
# (https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/#fallback-behaviour):
#
# ```
# [build-system]
# requires = ["setuptools>=40.8.0", "wheel"]
# build-backend = "setuptools.build_meta:__legacy__"
# ```
#
# Which is what gets used for me, as I don't specify a build backend for my projects.
# See https://github.com/microsoft/pylance-release/issues/4061,
# https://github.com/microsoft/pylance-release/issues/3407, and
# https://github.com/microsoft/pylance-release/blob/3306b3dcbda64da708e4089d52676d2b5527352e/TROUBLESHOOTING.md#editable-install-modules-not-found.
#
# For now we can use compatability mode with pip to mimic `python setup.py develop`, which was
# the old behavior of `pip install -e .` with setup.py.
#
# If/when this gets removed - it is currently pretty strongly worded as temporary - I'll likely
# either have to move to a different build backend (which may require moving to a different build
# backend, as I don't know whether pip supports swapping backends) or use `editable_mode = strict`.
# I haven't tried it yet, but I'm hoping to avoid strict mode as it seems it won't expose newly
# created files in the package for importing until you run an editable install again.
# That would be fairly unfortunate if that were the case, as requiring re-installing regularly
# is a dealbreaker for me.
#
# The above is a problem for future me when compat mode is removed though. Hopefully the ecosystem has
# solved this issue by then, either on pylance or pip/setuptool's side.

editable_mode = compat
