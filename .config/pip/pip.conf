[global]
# ok look. I don't fully understand why either, but pylance can't find packages which
# use pyproject.toml (instead of setup.py) and
# are installed with `pip install -e .`, at least with the [default build backend]
# (https://pip.pypa.io/en/stable/reference/build-system/pyproject-toml/#fallback-behaviour):
#
# ```
# [build-system]
# requires = ["setuptools>=40.8.0", "wheel"]
# build-backend = "setuptools.build_meta:__legacy__"
# ```
#
# Which is what gets used for me, as I don't specify a build backend for my projects.
# See https://github.com/microsoft/pylance-release/issues/4061,
# https://github.com/microsoft/pylance-release/issues/3407, and
# https://github.com/microsoft/pylance-release/blob/3306b3dcbda64da708e4089d52676d2b5527352e/TROUBLESHOOTING.md#editable-install-modules-not-found.
#
# For now we can use compatability mode with pip to mimic `python setup.py develop`, which was
# the old behavior of `pip install -e .` with setup.py.
#
# If/when this gets removed - it is currently pretty strongly worded as temporary - I'll likely
# either have to move to a different build backend (which may require moving to a different build
# backend, as I don't know whether pip supports swapping backends) or use `editable_mode = strict`.
# I haven't tried it yet, but I'm hoping to avoid strict mode as it seems it won't expose newly
# created files in the package for importing until you run an editable install again.
# That would be fairly unfortunate if that were the case, as requiring re-installing regularly
# is a dealbreaker for me.
#
# The above is a problem for future me when compat mode is removed though. Hopefully the ecosystem has
# solved this issue by then, either on pylance or pip/setuptool's side.

editable_mode = compat

# When I upgraded from python3.10 to python3.12, I started getting this error when using pip:
# ```
# error: externally-managed-environment
#
# × This environment is externally managed
# ╰─> To install Python packages system-wide, try brew install
#     xyz, where xyz is the package you are trying to
#     install.

#     If you wish to install a non-brew-packaged Python package,
#     create a virtual environment using python3 -m venv path/to/venv.
#     Then use path/to/venv/bin/python and path/to/venv/bin/pip.

#     If you wish to install a non-brew packaged Python application,
#     it may be easiest to use pipx install xyz, which will manage a
#     virtual environment for you. Make sure you have pipx installed.

# note: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.
# hint: See PEP 668 for the detailed specification.
# ```
#
# I think this was caused by the version bump, as I used brew to install both 3.10 and 3.12, and my understanding is that
# 3.10 should have triggered this warning as well. But maybe I really did change something in the interim here.
#
# Regardless, I think I'm just going to ignore this warning. PEP668 says:
# > It specifies that Python-specific package management tools should neither install nor remove packages into the interpreter’s
# > global context, by default, and should instead guide the end user towards using a virtual environment.
#
# which I have a bit of a visceral reaction to. I'm going to ignore venvs for as long as humanly possible, thank you very much.
# Installing globally works fine for me and will continue to for some time. Though I may cave eventually.

break-system-packages = true
