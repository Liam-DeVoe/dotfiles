{
    "workbench.editorAssociations": {
        "*.ipynb": "jupyter-notebook",
        "git-rebase-todo": "default"
    },
    "editor.minimap.enabled": false,
    "gitlens.blame.heatmap.enabled": false,
    "gitlens.codeLens.authors.enabled": false,
    "gitlens.codeLens.recentChange.enabled": false,
    "gitlens.currentLine.scrollable": false,
    "gitlens.hovers.annotations.changes": false,
    "gitlens.hovers.annotations.details": false,
    "gitlens.hovers.annotations.enabled": false,
    "gitlens.hovers.currentLine.changes": false,
    "gitlens.hovers.currentLine.details": false,
    "gitlens.hovers.currentLine.enabled": false,
    "files.trimFinalNewlines": true,
    "editor.rulers": [

    ],
    "[python]": {
        "editor.rulers": [
            80,
        ],
        "editor.formatOnType": false
    },
    "[markdown]": {
        "editor.wordWrap": "on",
        "diffEditor.wordWrap": "on"
    },
    "[toml]": {
        "editor.wordWrap": "on",
        "diffEditor.wordWrap": "on"
    },
    "[restructuredtext]": {
        "editor.wordWrap": "on",
        "diffEditor.wordWrap": "on",
        "editor.suggestOnTriggerCharacters": false,
    },
    "workbench.tree.renderIndentGuides": "none",
    "workbench.tips.enabled": false,
    "files.exclude": {
        "**/__pycache__": true,
        "**/*.pyc": true,
        "**/*.egg-info": true,
        "**/.classpath": true,
        "**/.project": true,
        "**/.settings": true,
        "**/.factorypath": true
    },
    "files.watcherExclude": {
        "**/.dolt/noms/**": true,
        "**/.git/objects/**": true,
        "**/.git/subtree-cache/**": true,
        "**/.hg/store/**": true,
        "**/node_modules/**": true
    },
    // "python.linting.pylintArgs": [
    //     "--disable=protected-access,invalid-name,logging-not-lazy,broad-except,missing-function-docstring,import-outside-toplevel,missing-module-docstring,missing-class-docstring,fixme,relative-beyond-top-level,wildcard-import,line-too-long,anomalous-backslash-in-string,too-many-arguments,too-few-public-methods,useless-super-delegation,too-many-lines,unnecessary-pass,wrong-import-order,redefined-outer-name,expression-not-assigned,dangerous-default-value,arguments-differ,abstract-method,too-many-locals,too-many-statements,wrong-import-position,too-many-instance-attributes,too-many-public-methods,too-many-nested-blocks,logging-fstring-interpolation,too-many-return-statements,too-many-ancestors,too-many-branches,inconsistent-return-statements,subprocess-run-check,eval-used,global-statement,exec-used,unused-wildcard-import,disallowed-name,bare-except,using-constant-test,raise-missing-from,redefined-builtin,unspecified-encoding,undefined-loop-variable,use-implicit-booleaness-not-comparison,signature-differs,arguments-renamed,deprecated-method,consider-using-get,missing-timeout,broad-exception-raised,multiple-statements,unidiomatic-typecheck,unnecessary-lambda-assignment,redefined-argument-from-local,consider-using-enumerate,unnecessary-dunder-call",
    // ],
    // Here is my understanding. The python extension, developed by microsoft, provides a "language server".
    // This is pylance by default. This provides nice things like autocomplete, click-to-go-to-definition, etc.
    // They also decided to include *linting* in the "features" provided by the language server. This is
    // not a good thing, as I already use ruff (or maybe something else by the time you read this) as my linter
    // and now I recieved duplicate error messages!
    //
    // This setting seems to disable pylance's linting while keeping all the other features I want. Bless the souls
    // at stackoverflow, because I never would have found this on my own. This is not documented anywhere I could
    // find, or exposed in the settings ui.
    //
    // see https://stackoverflow.com/a/73986643.
    // "python.analysis.ignore": ["*"],
    "ruff.lint.args": [
        // we'll start by enabling practically all of ruff's rules (except the categories which I
        // decided were absolutely worthless). Then we'll filter them further down by blacklisting specific ones.
        // This lets me opt-in to new implemented rules by default, which I want.
        // In other words, this is a blacklist, not a whitelist, of rules.
        "--select", "F",
        "--select", "E",
        "--select", "W",
        "--select", "UP",
        "--select", "PL",
        "--select", "ASYNC",
        "--select", "B",
        "--select", "COM",
        "--select", "C4",
        "--select", "ISC",
        "--select", "PIE",
        "--select", "RET",
        "--select", "SIM",
        "--select", "TCH",
        "--select", "ARG",
        "--select", "NPY",
        "--select", "PERF",
        "--select", "FURB",
        "--select", "RUF",

        // now the blacklist.
        "--ignore", "E741",
        "--ignore", "E501",
        "--ignore", "E402",
        "--ignore", "E731",
        "--ignore", "E721",
        "--ignore", "E702",
        "--ignore", "E722",
        "--ignore", "W605",
        "--ignore", "UP032",
        "--ignore", "UP007",
        "--ignore", "UP006",
        "--ignore", "UP031",
        "--ignore", "B006",
        "--ignore", "B008",
        "--ignore", "B018",
        "--ignore", "B020",
        "--ignore", "B023",
        "--ignore", "B904",
        "--ignore", "B011",
        "--ignore", "B027",
        "--ignore", "B019",
        "--ignore", "F403",
        "--ignore", "F405",
        "--ignore", "F402",
        "--ignore", "F841",
        "--ignore", "W291",
        "--ignore", "W293",
        "--ignore", "RET502",
        "--ignore", "COM812",
        "--ignore", "PIE790",
        "--ignore", "PIE808",
        "--ignore", "RET503",
        "--ignore", "RET504",

        // TODO revisit these. they're only really a problem in hypothesis code.
        "--ignore", "RET505",
        "--ignore", "RET506",

        "--ignore", "RET501",
        "--ignore", "SIM114",
        "--ignore", "SIM102",
        "--ignore", "SIM103",
        "--ignore", "SIM105",
        "--ignore", "SIM108",
        "--ignore", "SIM300",
        "--ignore", "RUF001",
        "--ignore", "RUF012",
        "--ignore", "RUF009",
        "--ignore", "RUF005",
        "--ignore", "RUF015",
        "--ignore", "RUF010",
        "--ignore", "RUF017",
        "--ignore", "RUF028",
        "--ignore", "ARG001",
        "--ignore", "ARG002",
        "--ignore", "ARG003",
        "--ignore", "ARG004",
        "--ignore", "ARG005",
        "--ignore", "PERF203",
        "--ignore", "PERF401",
        "--ignore", "PERF102",
        "--ignore", "NPY002",
        "--ignore", "TC006",
        "--ignore", "TC001",
        "--ignore", "TC002",
        "--ignore", "TC003",
        // pylint blacklist. still need to transfer a bunch of my old pylint ignores to ruff, but I cba
        // to manually lookup the conversion from names (pylint format) to codes (ruff format) for
        // the ones ruff doesn't have implemented yet. I'll blacklist these as they get implemented and as
        // I notice them.
        "--ignore", "PLR0913",
        "--ignore", "PLR2004",
        "--ignore", "PLR5501",
        "--ignore", "PLR0915",
        "--ignore", "PLR0912",
        "--ignore", "PLR0124",
        "--ignore", "PLW2901",
        "--ignore", "PLW0603",
        "--ignore", "PLW1510",
        "--ignore", "PLW1641",
        "--ignore", "PLR0911",
        "--ignore", "PLC0105",
        "--ignore", "PLC0415"
    ],


    "explorer.confirmDelete": false,
    "git.enableSmartCommit": true,
    "diffEditor.wordWrap": "off",
    "editor.renderWhitespace": "none",
    "explorer.confirmDragAndDrop": false,
    "search.smartCase": true,
    "debug.showInlineBreakpointCandidates": false,
    "workbench.editor.highlightModifiedTabs": true,
    "workbench.startupEditor": "newUntitledFile",
    "editor.find.autoFindInSelection": "multiline",
    "python.showStartPage": false,
    "latex-workshop.view.pdf.viewer": "tab",
    "githubPullRequests.queries": [

        // This is the default value of this setting:
        // {
        //     "label": "Waiting For My Review",
        //     "query": "is:open review-requested:${user}"
        // },
        // {
        //     "label": "Assigned To Me",
        //     "query": "is:open assignee:${user}"
        // },
        // {
        //     "label": "Created By Me",
        //     "query": "is:open author:${user}"
        // }

        // But I don't care about any of these categories and they're just
        // clutter, so I've removed them.
    ],
    "githubIssues.queries": [
        // A similar story here. Here's the default:
        // {
        //     "label": "My Issues",
        //     "query": "default"
        // },
        // {
        //     "label": "Created Issues",
        //     "query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
        // }

        // But I only care about the list of all open issues.
        {
            "label": "Created Issues",
            "query": "author:${user} state:open repo:${owner}/${repository} sort:created-desc"
        }
    ],
    "githubPullRequests.fileListLayout": "tree",
    "githubIssues.assignWhenWorking": false,
    "ruby.lint": {
        "rubocop": true
    },
    "markdownlint.config": {
        // disable "MD025/single-title/single-h1: Multiple top-level headings in the same document (MD025)"
        "single-h1": false,
        // disable MD041/first-line-heading/first-line-h1: First line in a file should be a top-level (MD041)
        "first-line-h1": false,
        // disable MD033/no-inline-html: Inline HTML (MD033)
        "no-inline-html": false,
        // disable MD001/heading-increment/header-increment: Heading levels should only increment by one level at a time (MD001)
        "header-increment": false
    },
    // the python extension changed their default language server to pylance recently (05/10/2021), which applies
    // semantic highlighting *on top of* my normal theme. I don't like this so I've disabled it globally here, since
    // I frustratingly can't find any way to disable it for only pylance or for only my particular theme (which is
    // "default dark +" I think?).
    // I may decide later that I actually like some of the semantic highlighting pylance provides and want to selectively
    // enable those highlightings. This will be a process since I believe I will need to manually override pylance's
    // highlightings to reset them back to what my theme provides for highlights I don't want changed. Or it may not
    // be possible at all. Not sure yet. But will take some time to play around with, so not doing it right now.
    "editor.semanticHighlighting.enabled": false,
    "git.confirmSync": false,
    "editor.find.seedSearchStringFromSelection": "never",
    "security.workspace.trust.enabled": false,
    "python.defaultInterpreterPath": "/opt/homebrew/bin/python3.12",
    "files.associations": {
        "*.rst": "restructuredtext"
    },
    "notebook.cellToolbarLocation": {
        "default": "right",
        "jupyter-notebook": "left"
    },
    "typescript.updateImportsOnFileMove.enabled": "always",
    "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
    "gitlens.views.searchAndCompare.files.layout": "tree",
    "git.enableStatusBarSync": false,

    // going to give only accepting quick suggestions on tab a try, since
    // I get very annoyed by having to press escape and then enter when I just
    // want to type a new line.
    "editor.quickSuggestions": {
        "other": false,
        "comments": false,
        "strings": false
    },
    "breadcrumbs.enabled": false,
    // I was getting an annoying error every time I opened vscode without this option enabled,
    // something about the language server not supporting multi-root workspaces. I don't
    // really care about rst intellisense so I've just disabled it to silence the error.
    "restructuredtext.languageServer.disabled": true,
    "html.completion.attributeDefaultValue": "empty",
    "java.import.gradle.java.home": "/opt/homebrew/Cellar/openjdk@17/17.0.3/libexec/openjdk.jdk/Contents/Home",
    "files.insertFinalNewline": true,
    "git.showActionButton": {
        "commit": false,
        "publish": false,
        "sync": false
    },
    "workbench.editor.decorations.colors": false,
    "workbench.editor.decorations.badges": false,
    "scm.diffDecorationsGutterPattern": {
        "modified": false
    },
    "gitlens.currentLine.enabled": false,
    // "editor.acceptSuggestionOnEnter": "off"

    "workbench.colorCustomizations": {
        "[Default Dark+]": {
            // TODO I'm 98% sure they made the red color for diff comparisons brighter
            // in the most recent update (as of 08/04/2022). I'd really like to revert
            // it to what it was, but there's annoying alpha channels I have to deal
            // with here and it makes finding the correct color that was used previously
            // very difficult...
            // https://stackoverflow.com/a/71176424

            // not perfect, but at least it's not the blinding brightness it was before.
            // TODO check in on this in the next release to see if this was a bug, perhaps
            // with my theme.
            // (edit later that day: here's the PR that made this change
            // https://github.com/microsoft/vscode/pull/155344)
            // - liam 08/04/2022

            // update: I've changed the value here to the one kindly provided by eddyb on github
            // https://github.com/microsoft/vscode/pull/155344#discussion_r950667450,
            // which he claims (accurately, I think) matches previous brightness before the change.
            // Disappointing this still hasn't been fixed
            "diffEditor.removedTextBackground": "#ff000033",
            "diffEditor.insertedTextBackground": "#80a52833",
            // after a computer restart vscode's background felt way darker than normal, but
            // incognito tabs and slack also felt a little darker than normal. Not sure if I triggered some
            // macos-level color adjustment by restarting or the restarting of vscode triggered a theme update,
            // but for now I've manually selected a color that looks close to what I had before.
            // I've done the same fot the sidebar, which wasn't as egregious but still felt darker than it used to.
            // At some point I need to fix in stone all the colors default dark+ has so I'm not at the mercy of
            // theme updates.
            // - liam 10/27/2022
            "editor.background": "#252525",
            "sideBar.background": "#292929"
        },
        // "[Default Light Modern]": {
        //     // I'm currently writing my DC systems 008 "Revisiting Property-Based Testing with Typed Choices"
        //     // talk, and am playing around with overriding this so it matches the background color of my
        //     // slides, so I can copy code with nice syntax highlighting from vscode.
        //     "editor.background": "#FBFBFB",
        // }
    },
    "editor.folding": false,
    "editor.bracketPairColorization.enabled": false,
    "workbench.settings.enableNaturalLanguageSearch": false,
    "extensions.ignoreRecommendations": true,
    "terminal.integrated.scrollback": 20000,

    "editor.tokenColorCustomizations": {
        // default dark + colors things that used to be python keywords, like "file", as light blue.
        // I often use "file" in particular as a variable name and don't want it to have any special
        // coloring.
        "[Default Dark+]": {
            "textMateRules": [
                {
                    "scope": "variable.legacy.builtin.python",
                    "settings": {
                        // default "nothing-special" white coloring
                        "foreground": "#D4D4D4"
                    }
                },
                { "name": "JS/TS comments", "scope": ["source.js comment", "source.ts comment", "source.tsx comment", "source.jsx comment"], "settings": { "foreground": "#6A9955" } },

                { "name": "JS/TS numbers", "scope": ["source.js constant.numeric", "source.ts constant.numeric", "source.tsx constant.numeric", "source.jsx constant.numeric"], "settings": { "foreground": "#B5CEA8" } },
                { "name": "JS/TS language constants", "scope": ["source.js constant.language", "source.ts constant.language", "source.tsx constant.language", "source.jsx constant.language"], "settings": { "foreground": "#569CD6" } },

                { "name": "JS/TS strings", "scope": ["source.js string", "source.ts string", "source.tsx string", "source.jsx string"], "settings": { "foreground": "#CE9178" } },
                { "name": "JS/TS regex body", "scope": ["source.js string.regexp", "source.ts string.regexp", "source.tsx string.regexp", "source.jsx string.regexp"], "settings": { "foreground": "#D16969" } },
                { "name": "JS/TS regex groups/punctuation", "scope": [
                    "source.js punctuation.definition.group.regexp",
                    "source.js punctuation.definition.character-class.regexp",
                    "source.js punctuation.character.set.begin.regexp",
                    "source.js punctuation.character.set.end.regexp",
                    "source.ts punctuation.definition.group.regexp",
                    "source.ts punctuation.definition.character-class.regexp",
                    "source.ts punctuation.character.set.begin.regexp",
                    "source.ts punctuation.character.set.end.regexp",
                    "source.tsx punctuation.definition.group.regexp",
                    "source.tsx punctuation.definition.character-class.regexp",
                    "source.tsx punctuation.character.set.begin.regexp",
                    "source.tsx punctuation.character.set.end.regexp",
                    "source.jsx punctuation.definition.group.regexp",
                    "source.jsx punctuation.definition.character-class.regexp",
                    "source.jsx punctuation.character.set.begin.regexp",
                    "source.jsx punctuation.character.set.end.regexp"
                ], "settings": { "foreground": "#CE9178" } },

                { "name": "JS/TS keywords (general)", "scope": ["source.js keyword", "source.ts keyword", "source.tsx keyword", "source.jsx keyword"], "settings": { "foreground": "#569CD6" } },
                { "name": "JS/TS control keywords", "scope": ["source.js keyword.control", "source.ts keyword.control", "source.tsx keyword.control", "source.jsx keyword.control"], "settings": { "foreground": "#C586C0" } },
                { "name": "Storage (let/const/var, type modifiers)", "scope": ["source.js storage", "source.ts storage", "source.tsx storage"], "settings": { "foreground": "#569CD6" } },

                { "name": "Operators (symbolic)", "scope": ["source.js keyword.operator", "source.ts keyword.operator", "source.tsx keyword.operator", "source.jsx keyword.operator"], "settings": { "foreground": "#D4D4D4" } },
                { "name": "Operators (wordlike: new/typeof/instanceof/delete/in)", "scope": [
                    "source.js keyword.operator.new", "source.js keyword.operator.typeof", "source.js keyword.operator.instanceof", "source.js keyword.operator.delete", "source.js keyword.operator.in",
                    "source.ts keyword.operator.new", "source.ts keyword.operator.typeof", "source.ts keyword.operator.instanceof", "source.ts keyword.operator.delete", "source.ts keyword.operator.in",
                    "source.tsx keyword.operator.new", "source.tsx keyword.operator.typeof", "source.tsx keyword.operator.instanceof", "source.tsx keyword.operator.delete", "source.tsx keyword.operator.in",
                    "source.jsx keyword.operator.new", "source.jsx keyword.operator.typeof", "source.jsx keyword.operator.instanceof", "source.jsx keyword.operator.delete", "source.jsx keyword.operator.in"
                ], "settings": { "foreground": "#569CD6" } },

                { "name": "Language vars (this, super, arguments)", "scope": ["source.js variable.language", "source.ts variable.language", "source.tsx variable.language", "source.jsx variable.language"], "settings": { "foreground": "#569CD6" } },

                { "name": "Variables", "scope": [
                    "source.js variable", "source.ts variable", "source.tsx variable", "source.jsx variable",
                    "source.js meta.definition.variable.name", "source.ts meta.definition.variable.name", "source.tsx meta.definition.variable.name"
                ], "settings": { "foreground": "#9CDCFE" } },
                { "name": "Constants and enum members", "scope": [
                    "source.js variable.other.constant", "source.js variable.other.enummember",
                    "source.ts variable.other.constant", "source.ts variable.other.enummember",
                    "source.tsx variable.other.constant", "source.tsx variable.other.enummember"
                ], "settings": { "foreground": "#4FC1FF" } },
                { "name": "Parameters", "scope": ["source.js variable.parameter", "source.ts variable.parameter", "source.tsx variable.parameter"], "settings": { "foreground": "#9CDCFE" } },

                { "name": "Function names (decls & calls)", "scope": [
                    "source.js entity.name.function", "source.js support.function",
                    "source.ts entity.name.function", "source.ts support.function",
                    "source.tsx entity.name.function", "source.tsx support.function",
                    "source.jsx entity.name.function", "source.jsx support.function"
                ], "settings": { "foreground": "#DCDCAA" } },

                { "name": "Object literal keys", "scope": ["source.js meta.object-literal.key", "source.ts meta.object-literal.key", "source.tsx meta.object-literal.key", "source.jsx meta.object-literal.key"], "settings": { "foreground": "#9CDCFE" } },

                { "name": "TS types/classes/interfaces/namespaces", "scope": [
                    "source.ts entity.name.type", "source.ts entity.name.class", "source.ts entity.name.namespace", "source.ts support.type", "source.ts support.class",
                    "source.tsx entity.name.type", "source.tsx entity.name.class", "source.tsx entity.name.namespace", "source.tsx support.type", "source.tsx support.class"
                ], "settings": { "foreground": "#4EC9B0" } },
                { "name": "TS primitive types", "scope": ["source.ts support.type.primitive", "source.tsx support.type.primitive"], "settings": { "foreground": "#4EC9B0" } },

                { "name": "JSX/TSX tag names", "scope": ["source.jsx entity.name.tag", "source.tsx entity.name.tag"], "settings": { "foreground": "#569CD6" } },
                { "name": "JSX/TSX attributes", "scope": ["source.jsx entity.other.attribute-name", "source.tsx entity.other.attribute-name"], "settings": { "foreground": "#9CDCFE" } },
                { "name": "JSX/TSX tag punctuation", "scope": ["source.jsx punctuation.definition.tag", "source.tsx punctuation.definition.tag"], "settings": { "foreground": "#808080" } },

                { "name": "Template expr punctuation", "scope": [
                    "source.js punctuation.definition.template-expression.begin", "source.js punctuation.definition.template-expression.end", "source.js punctuation.section.embedded",
                    "source.ts punctuation.definition.template-expression.begin", "source.ts punctuation.definition.template-expression.end", "source.ts punctuation.section.embedded",
                    "source.tsx punctuation.definition.template-expression.begin", "source.tsx punctuation.definition.template-expression.end", "source.tsx punctuation.section.embedded"
                ], "settings": { "foreground": "#569CD6" } },
                { "name": "Template expr content", "scope": ["source.js meta.template.expression", "source.ts meta.template.expression", "source.tsx meta.template.expression"], "settings": { "foreground": "#D4D4D4" } },

                { "name": "Imports/exports", "scope": [
                    "source.js keyword.control.import", "source.js keyword.control.export",
                    "source.ts keyword.control.import", "source.ts keyword.control.export",
                    "source.tsx keyword.control.import", "source.tsx keyword.control.export",
                    "source.jsx keyword.control.import", "source.jsx keyword.control.export"
                ], "settings": { "foreground": "#C586C0" } },
                {
                    "name": "Function calls → white (JS/TS/TSX/JSX)",
                    "scope": [
                      "source.js meta.function-call entity.name.function",
                      "source.ts meta.function-call entity.name.function",
                      "source.tsx meta.function-call entity.name.function",
                      "source.jsx meta.function-call entity.name.function",
                      "source.js meta.method-call entity.name.function",
                      "source.ts meta.method-call entity.name.function",
                      "source.tsx meta.method-call entity.name.function",
                      "source.jsx meta.method-call entity.name.function",
                      "source.js meta.function-call variable.function",
                      "source.ts meta.function-call variable.function",
                      "source.tsx meta.function-call variable.function",
                      "source.jsx meta.function-call variable.function",
                      "source.js support.function",
                      "source.ts support.function",
                      "source.tsx support.function",
                      "source.jsx support.function"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  },
                  {
                    "name": "TS non-primitive type refs → white",
                    "scope": [
                      "source.ts meta.type.annotation entity.name.type",
                      "source.tsx meta.type.annotation entity.name.type",
                      "source.ts meta.type.parameters entity.name.type",
                      "source.tsx meta.type.parameters entity.name.type"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  },
                  {
                    "name": "Variables (read/write) → white",
                    "scope": [
                      "source.js variable.other.readwrite",
                      "source.jsx variable.other.readwrite",
                      "source.ts variable.other.readwrite",
                      "source.tsx variable.other.readwrite",
                      "source.js meta.definition.variable variable.other.readwrite",
                      "source.jsx meta.definition.variable variable.other.readwrite",
                      "source.ts meta.definition.variable variable.other.readwrite",
                      "source.tsx meta.definition.variable variable.other.readwrite"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  },
                  {
                    "name": "JSX/TSX attribute names → white",
                    "scope": [
                      "entity.other.attribute-name.tsx",
                      "entity.other.attribute-name.jsx",
                      "source.tsx entity.other.attribute-name",
                      "source.jsx entity.other.attribute-name"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  },
                  {
                    "name": "Object literal keys → white",
                    "scope": [
                      "source.tsx meta.object-literal.key",
                      "source.ts meta.object-literal.key",
                      "source.jsx meta.object-literal.key",
                      "source.js meta.object-literal.key"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  },
                  {
                    "name": "Const variables → white",
                    "scope": [
                      "source.js variable.other.constant",
                      "source.jsx variable.other.constant",
                      "source.ts variable.other.constant",
                      "source.tsx variable.other.constant",
                      "source.js meta.definition.variable variable.other.constant",
                      "source.jsx meta.definition.variable variable.other.constant",
                      "source.ts meta.definition.variable variable.other.constant",
                      "source.tsx meta.definition.variable variable.other.constant"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  },
                  {
                    "name": "Object vars and properties → white",
                    "scope": [
                      "source.tsx variable.other.property",
                      "source.tsx variable.other.object",
                      "source.ts variable.other.property",
                      "source.ts variable.other.object",
                      "source.jsx variable.other.property",
                      "source.jsx variable.other.object",
                      "source.js variable.other.property",
                      "source.js variable.other.object"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  },
                  {
                    "name": "Enum members → white",
                    "scope": [
                      "source.tsx variable.other.enummember",
                      "source.ts variable.other.enummember",
                      "source.jsx variable.other.enummember",
                      "source.js variable.other.enummember",
                      "source.tsx meta.enum.declaration variable.other.enummember",
                      "source.ts meta.enum.declaration variable.other.enummember"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  },
                  {
                    "name": "Built-in property names (length etc.) → white",
                    "scope": [
                      "source.tsx support.variable.property",
                      "source.ts support.variable.property",
                      "source.jsx support.variable.property",
                      "source.js support.variable.property",
                      "source.tsx support.variable.property.dom",
                      "source.ts support.variable.property.dom",
                      "source.jsx support.variable.property.dom",
                      "source.js support.variable.property.dom"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  },
                  {
                    "name": "TS return type refs → white",
                    "scope": [
                      "source.ts meta.return.type entity.name.type",
                      "source.tsx meta.return.type entity.name.type",
                      "source.ts meta.type.arguments entity.name.type",
                      "source.tsx meta.type.arguments entity.name.type"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  },
                  {
                    "name": "Interface names (declarations) → white",
                    "scope": [
                      "source.tsx meta.interface entity.name.type.interface",
                      "source.ts meta.interface entity.name.type.interface"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  },
                  {
                    "name": "Interface property names → white",
                    "scope": [
                      "source.tsx meta.interface variable.object.property",
                      "source.ts meta.interface variable.object.property"
                    ],
                    "settings": { "foreground": "#D4D4D4" }
                  }
            ]
        }
    },
    "coq.proofViewDiff.addedTextIsItalic": true,
    "coqtop.binPath": "/Users/tybug/.opam/default/bin/",
    // removes things like `and`, `yield`, `for` from control+space intellisense.
    // I would like to also get rid of python builtins like `__file__` or `iter`,
    // but vscode doesn't seem to expose an option for builtins, not a way to manually
    // exclude certain suggestions.
    "editor.suggest.showKeywords": false,
    "lldb.library": "/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Versions/A/LLDB",
    "git.openRepositoryInParentFolders": "never",
    "python.experiments.enabled": false,
    "workbench.editor.empty.hint": "hidden",
    // 10/16/2023: trying this out. may revert later.
    "python.terminal.focusAfterLaunch": true,
    "workbench.statusBar.visible": false,
    "gitlens.plusFeatures.enabled": false,
    "gitlens.virtualRepositories.enabled": false,
    "gitlens.ai.experimental.generateCommitMessage.enabled": false,
    // set to "basic" to enable type checking
    "python.analysis.typeCheckingMode": "off",
    "python.analysis.diagnosticSeverityOverrides": {
        "reportUnboundVariable": "none",
        "reportInvalidTypeForm": "none",
        // this category includes a frustrating amount of unrelated things. It includes:
        //
        // ```
        // def f(x: int):
        //     x = "a"
        // ```
        //
        // which is rarely an error for me. However, this category also includes:
        //
        // ```
        // instance.nonexistent_method()
        // ```
        //
        // which is a mistake I make all the time. I would love to have the latter enabled, but not the former.
        // I don't know of any way to achieve that currently, though.
        //
        // "reportGeneralTypeIssues": "none"
    },
    "diffEditor.ignoreTrimWhitespace": false,
    "window.commandCenter": false,
    // https://stackoverflow.com/a/68037114
    "editor.lightbulb.enabled": "off",
    "editor.dragAndDrop": false,
    "workbench.tree.enableStickyScroll": false,
    "editor.stickyScroll.enabled": false,
    "debugpy.debugJustMyCode": false,
    "window.confirmSaveUntitledWorkspace": false,
    "workbench.editor.untitled.labelFormat": "name",
    "editor.cursorBlinking": "solid",
    "explorer.confirmPasteNative": false,
    "zenMode.showTabs": "none",
    "diffEditor.renderIndicators": false,
    "diffEditor.renderMarginRevertIcon": false,
    "editor.unicodeHighlight.allowedCharacters": {
        "σ": true,
        "–": true,
        "𝒪": true
    },
    "editor.acceptSuggestionOnEnter": "smart",
    "editor.inlineSuggest.enabled": false,
    "editor.inlineSuggest.showToolbar": "never",
    "editor.inlineSuggest.suppressSuggestions": true,
    "editor.snippetSuggestions": "none",
    "gitlens.views.searchAndCompare.avatars": false,
    "files.trimTrailingWhitespace": true,
    "scm.showIncomingChanges": "never",
    "scm.showOutgoingChanges": "never",
    "workbench.activityBar.location": "top",
    "gitlens.ai.experimental.model": "anthropic:claude-3-opus-20240229",
    "scm.showHistoryGraph": false,
    "workbench.colorTheme": "Default Dark+",
    "editor.unicodeHighlight.ambiguousCharacters": false,
    "diffEditor.renderSideBySide": true,
    "gitlens.views.scm.grouped.views": {
        "commits": true,
        "branches": true,
        "remotes": true,
        "stashes": true,
        "tags": true,
        "worktrees": true,
        "contributors": true,
        "repositories": false,
        "searchAndCompare": true,
        "launchpad": false
    },
    "python.testing.pytestEnabled": true,
    "python.testing.promptToConfigure": false,
    "python.testing.autoTestDiscoverOnSaveEnabled": false,
    "terminal.integrated.shellIntegration.decorationsEnabled": "never",
    "diffEditor.renderGutterMenu": false,
    "gitlens.codeLens.enabled": false,
    "testing.gutterEnabled": false,
    "telemetry.telemetryLevel": "off",
    "gitlens.telemetry.enabled": false,
    "workbench.enableExperiments": false,
    "workbench.cloudChanges.autoResume": "off",
    "workbench.cloudChanges.continueOn": "off",
    "settingsSync.keybindingsPerPlatform": false,
    "npm.fetchOnlinePackageInfo": false,
    "chat.commandCenter.enabled": false,
    "chat.agent.enabled": false,
    "remote.SSH.experimental.chat": false,
    "telemetry.feedback.enabled": false,
    "workbench.layoutControl.enabled": false,
    "update.showReleaseNotes": false,
    "workbench.secondarySideBar.defaultVisibility": "hidden",
    "terminal.integrated.stickyScroll.enabled": false,
    "diffEditor.hideUnchangedRegions.enabled": true,
}
