#!/usr/bin/env python3

# I use git as my backup system, by keeping a git repository on my backup
# harddrive and adding a new commit for every backup. This means I get
# differential backups for free, without needing to learn a new backup tool or
# special syntax. It also lets me rest easy knowing that the "backup software"
# of my choice (in this case, git) will still be around in 50 years: if git
# isn't maintained in 50 years, I have bigger things to worry about.
#
# There's a reason most people don't use git as their backup system: you can't
# nest git repositories. Yes, you can if you count gitmodules, but those are
# not sufficient for my purposes because they track changes on a true per-repo
# basis. I need a single repository for my entire backup storage system so that
# the incremental diffs play nicely.
#
# To get around this, we'll rename every special git-related file or folder to a
# version which git doesn't recognize, so to git the file system will look like
# a single git repository (initialized only once, at the top level). By
# "renaming", I just mean prepending an underscore, eg `.git` -> `._git`.
#
# This does restrict the filenames I can choose on my computer, but I find that
# to be an acceptable tradeoff. This script will abort if a file or folder by
# the name we want already exists.
#
# To set up backups:
# * initialize a git repository somehwere on your backup harddrive. We'll call
#   this folder the "backup root".
# * cd into the backup root and make a new folder which will be the parent for
#   the contents of your backups. It's easier to do this than dealing with
#   trying to ignore the master .git folder at the top level when committing new
#   backups. We'll call this folder the "backup container". Your directory
#   structure should look like "backuproot/backupcontainer" (you can name them
#   anything you want, of course).
#
# To take a new backup:
# * We'll call the directory you want to back up the "snapshot root". Your
#   snapshot root folder itself won't be copied, but everyhting in it will.
#   If you already have such a folder on your working drive which is the
#   entirety of what you want to back up, great - that suffices for your
#   snapshot root. If you have a directory where you want to back up some parts
#   of it, but not everything, you'll need to copy that to a new location -
#   either somewhere on your working drive or somewhere on your backup drive,
#   not including inside your backup root. Personally I like copying it to my
#   backup drive and then deleting it entirely once I'm done.
#   For instance, I want to back up some files in my ~/, but not all of them.
#   So I copy ~/ to my backup drive and delete the files I don't want, and
#   that's my snapshot root.
# * To take the backup, cd into your backup container and run
#   `backup /path/to/snapshot/root`. You'll be prompted to confirm this is
#   really what you want to do and where you want to do it, as well as some
#   sanity checks to make sure you're not overwriting your master git repo.
#   The backup command will take care of everything else for you, including
#   renaming git files before committing and actually committing.
#   This command will probably take a long time to run fully.


from datetime import datetime
from pathlib import Path
import sys
import os

# https://stackoverflow.com/a/12719247/12164878
SPECIAL_FILES = [".gitignore", ".gitattributes", ".gitmodules", ".mailmap"]

def rename_path(p):
    # move `.path_name` to `._path_name`
    new_path = p.parent / ("._" + p.name[1:])
    if new_path.exists():
        raise Exception(f"tried to move {p} to {new_path}, but found an "
            f"existing item at {new_path}. Aborting")
    print(f"moving {p} to {new_path}")
    p.rename(new_path)


if len(sys.argv) < 2:
    print("positional argument 'directory-to-backup' is required.")
    sys.exit(0)

to_backup = Path(sys.argv[1])
root = Path(".")

# sanity check our working directory to make sure we're not going to overwrite
# a git repository
for p in root.glob("*"):
    if p.name == ".git":
        print(f"There is an existing git repository in {root.absolute()}, "
            "which might be "
            "the master git repository for all backups. This dir would get "
            "deleted if we continued. Aborting for safety.")
        sys.exit(0)

answer = input(f"Backup {to_backup.absolute()} to {root.absolute()}? y/n ")
if answer.lower() not in ["y", "yes"]:
    print("Aborting")
    sys.exit(0)


print(f"removing all files in {root.absolute()} ...")
# /{*,.*} ensures that hidden files are also deleted, but not the main directory
# https://askubuntu.com/a/60433
os.system(f"rm -rf \"{root.absolute()}\"/{{*,.*}}")
print(f"removing all files in {root.absolute()} ... done")

print(f"copying all files in {to_backup.absolute()} to {root} ...")
# \ avoids using aliased cp, which for me uses the prompt-for-overwrite -i flag,
# which we don't want here.
# you may wonder why this is even necessary - we just wiped the directory, so
# what could possibly be duplicated? well, our copying takes so long that macos
# inserts some .DS_Store files in directories we've created but not finished
# copying over yet. Then when we do get to the .DS_Store file in the original
# folder and copy it over, it clashes with the newly created .DS_Store file.
# We want to overwrite in such cases.
os.system(f"\cp -va \"{to_backup.absolute()}\"/. {root}")
print(f"copying all files in {to_backup.absolute()} to {root} ... done")

print(f"prefixing git files in {root.absolute()} with underscores ...")
for p in root.rglob("*"):
    if p.is_dir() and p.name == ".git":
        rename_path(p)
    if p.is_file() and p.name in SPECIAL_FILES:
        rename_path(p)
print(f"prefixing git files in {root.absolute()} with underscores ... done")

print("adding all files to git (git add .) ...")
# make sure all files are tracked before committing, or we'll only commit some
# of the files.
os.system(f"git -C \"{root.absolute()}\" add .")
print("adding all files to git (git add .) ... done")

date_str = datetime.now().strftime("%m/%d/%Y")
print(f"committing backup {date_str} ... ")
os.system(f"git -C \"{root.absolute()}\" commit -a -m \"backup {date_str}\"")
print(f"committing backup {date_str} ... done")
